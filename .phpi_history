class A {
private $a;
function getA() {
return $this->a;
}
class A{}
class B{}
7+8;
exit
class A{}
'dfdfd';
echo 'dfdfd';
echo 'dfdfd', PHP_EOL;
vim
eval('echo 6');
eval('echo 6;');
eval('class flkjdsflkjsdfipefosdlkf{}');
eval('class A{}');
$a = new A();
class A{}
class A{}
echo PHP_EOL;
q
exit
class A{}
$a = new A();
class A { }
function a(){
return 8;
}
eval('function a(){return 8;}');
echo a();
function b(){ return 8;}
eval('function a(){return 8;}');
eval('function a(){return 8;}');
if(true) {
echo 'sdsds';
} else {
echo 'dfdfsdfsdf';
}
echo dfdf;
echo 'fdfsdf'
eval('class A{}');
eval('class A{}');
eval('@class A{}');
@eval('class A{}');
eval('namespace foo; class A{}');
eval('namespace boo; class A{}');
$a = new A();
eval('namespace boo; class A{}');
use boo;
use namespace boo;
$a = new boo\A();
exit
class A{}
$a = new A();
function a() {
return 8;
}
echo a();
echo eval('return true;');
echo eval('return true; function a() {');
echo eval('return(echo 1;);');
echo eval('return(echo 1);');
return(7);
7
return(7+89);
echo eval('return true; namespace u; return(8+9);');
namespace h;
class A{
}
namespace jop;
return true; namespace hui;
8;
echo @eval('return true; function a() {');
echo eval('return true; function a() {');
echo eval('return true; function a(');
class A {
function a() {
return 8;
}
$a = new A();
echo $a->a();
